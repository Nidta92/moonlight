
import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
import os

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("TOKEN")
admin_ids_str = os.getenv("ADMIN_CHAT_IDS", "")
ADMIN_CHAT_IDS = [int(x) for x in admin_ids_str.split(",") if x.strip()]
COOLDOWN_SECONDS = 60
DB_PATH = "bot_data.db"

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ñ–∞–ª–æ–±–∞"), KeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

# === –ë–î ===
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            feedback_type TEXT,
            content TEXT,
            photo_id TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS cooldowns (
            user_id INTEGER PRIMARY KEY,
            next_allowed DATETIME
        )
    """)
    conn.commit()
    conn.close()

def can_send(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT next_allowed FROM cooldowns WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        return True, 0
    else:
        next_time = datetime.fromisoformat(row[0])
        now = datetime.utcnow()
        if now >= next_time:
            return True, 0
        else:
            remaining = int((next_time - now).total_seconds())
            return False, remaining

def update_cooldown(user_id):
    next_time = datetime.utcnow() + timedelta(seconds=COOLDOWN_SECONDS)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("REPLACE INTO cooldowns (user_id, next_allowed) VALUES (?, ?)", (user_id, next_time.isoformat()))
    conn.commit()
    conn.close()

def save_message(user_id, feedback_type, content, photo_id=None):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO messages (user_id, feedback_type, content, photo_id)
        VALUES (?, ?, ?, ?)
    """, (user_id, feedback_type, content, photo_id))
    conn.commit()
    conn.close()

def get_stats():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM messages WHERE feedback_type = '–ñ–∞–ª–æ–±–∞'")
    complaints = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM messages WHERE feedback_type = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'")
    suggestions = cursor.fetchone()[0]
    conn.close()
    return complaints, suggestions

# === –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ===

user_feedback_type = {}

@dp.message(F.text == "/start")
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –±–æ—Ç –¥–ª—è —Ñ–ª—É–¥–∞ Moonlight. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu_keyboard
    )

@dp.message(F.text == "/stats")
async def stats_handler(message: types.Message):
    if message.from_user.id in ADMIN_CHAT_IDS:
        c, s = get_stats()
        await message.answer(
    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    f"–ñ–∞–ª–æ–±: {c}\n"
    f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {s}"
)
    else:
        await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

@dp.message(F.text.in_(["–ñ–∞–ª–æ–±–∞", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"]))
async def type_choice_handler(message: types.Message):
    user_feedback_type[message.from_user.id] = message.text
    await message.answer(f"‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É {message.text.lower()} (–º–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ):")

@dp.message(F.text | F.photo)
async def feedback_handler(message: types.Message):
    user_id = message.from_user.id
    can, wait = can_send(user_id)
    if not can:
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {wait} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π.")
        return

    feedback_type = user_feedback_type.get(user_id)
    if not feedback_type:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–ñ–∞–ª–æ–±–∞' –∏–ª–∏ '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'.")
        return

    content = message.caption or message.text or "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
    photo_id = message.photo[-1].file_id if message.photo else None

    save_message(user_id, feedback_type, content, photo_id)
    update_cooldown(user_id)

    for admin_id in ADMIN_CHAT_IDS:
        if photo_id:
            await bot.send_photo(
                chat_id=admin_id,
                photo=photo_id,
                caption=f"üì¨ –ù–æ–≤–∞—è {feedback_type.lower()}:\n\n{content}"
            )
        else:
            await bot.send_message(
                chat_id=admin_id,
                text=f"üì¨ –ù–æ–≤–∞—è {feedback_type.lower()}:\n\n{content}"
            )

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å?", reply_markup=menu_keyboard)
    user_feedback_type.pop(user_id, None)


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
