iimport asyncio
import logging
import os
import sqlite3
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = "7938812822:AAE3hidbaMkycvDStg9JR2Q0F4Bpi7sP574"
ADMIN_CHAT_IDS = [7714767386, 5914528610]
COOLDOWN_SECONDS = 60
DB_PATH = "bot_data.db"

WEBHOOK_PATH = f"/webhook/{TOKEN}"
BASE_WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")  # –í Render –Ω–∞–¥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—Ç—å —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
if not BASE_WEBHOOK_URL:
    raise RuntimeError("RENDER_EXTERNAL_URL environment variable is not set!")
WEBHOOK_URL = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ñ–∞–ª–æ–±–∞"), KeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

# === –†–∞–±–æ—Ç–∞ —Å –ë–î ===
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            feedback_type TEXT,
            content TEXT,
            photo_id TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS cooldowns (
            user_id INTEGER PRIMARY KEY,
            next_allowed DATETIME
        )
    """)
    conn.commit()
    conn.close()

def can_send(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT next_allowed FROM cooldowns WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        return True, 0
    next_time = datetime.fromisoformat(row[0])
    now = datetime.utcnow()
    if now >= next_time:
        return True, 0
    remaining = int((next_time - now).total_seconds())
    return False, remaining

def update_cooldown(user_id):
    next_time = datetime.utcnow() + timedelta(seconds=COOLDOWN_SECONDS)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("REPLACE INTO cooldowns (user_id, next_allowed) VALUES (?, ?)", (user_id, next_time.isoformat()))
    conn.commit()
    conn.close()

def save_message(user_id, feedback_type, content, photo_id=None):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO messages (user_id, feedback_type, content, photo_id)
        VALUES (?, ?, ?, ?)
    """, (user_id, feedback_type, content, photo_id))
    conn.commit()
    conn.close()

def get_stats():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM messages WHERE feedback_type = '–ñ–∞–ª–æ–±–∞'")
    complaints = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM messages WHERE feedback_type = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'")
    suggestions = cursor.fetchone()[0]
    conn.close()
    return complaints, suggestions

# === –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ===
user_feedback_type = {}

@dp.message(F.text == "/start")
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –±–æ—Ç –¥–ª—è —Ñ–ª—É–¥–∞ Moonlight. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu_keyboard
    )

@dp.message(F.text == "/stats")
async def stats_handler(message: types.Message):
    if message.from_user.id in ADMIN_CHAT_IDS:
        complaints, suggestions = get_stats()
        await message.answer(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"–ñ–∞–ª–æ–±: {complaints}\n"
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {suggestions}"
        )
    else:
        await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

@dp.message(F.text.in_(["–ñ–∞–ª–æ–±–∞", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"]))
async def type_choice_handler(message: types.Message):
    user_feedback_type[message.from_user.id] = message.text
    await message.answer(f"‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É {message.text.lower()} (–º–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ):")

@dp.message(F.text | F.photo)
async def feedback_handler(message: types.Message):
    user_id = message.from_user.id
    can, wait = can_send(user_id)
    if not can:
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {wait} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π.")
        return

    feedback_type = user_feedback_type.get(user_id)
    if not feedback_type:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–ñ–∞–ª–æ–±–∞' –∏–ª–∏ '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'.")
        return

    content = message.caption or message.text or "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
    photo_id = message.photo[-1].file_id if message.photo else None

    save_message(user_id, feedback_type, content, photo_id)
    update_cooldown(user_id)

    for admin_id in ADMIN_CHAT_IDS:
        try:
            if photo_id:
                await bot.send_photo(
                    chat_id=admin_id,
                    photo=photo_id,
                    caption=f"üì¨ –ù–æ–≤–∞—è {feedback_type.lower()}:\n\n{content}"
                )
            else:
                await bot.send_message(
                    chat_id=admin_id,
                    text=f"üì¨ –ù–æ–≤–∞—è {feedback_type.lower()}:\n\n{content}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∞–º: {e}")

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å?", reply_markup=menu_keyboard)
    user_feedback_type.pop(user_id, None)

# === –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞ ===
async def on_startup(app):
    init_db()
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω")

async def main():
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É—Ç–∏ –≤–µ–±—Ö—É–∫–∞
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)

    port = int(os.getenv("PORT", 8000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBHOOK_URL} (–ø–æ—Ä—Ç {port})")

    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

